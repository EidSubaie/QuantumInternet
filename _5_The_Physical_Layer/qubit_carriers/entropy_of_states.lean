import data.real.basic
import analysis.special_functions.exp_log
import .quantum_state
import ..optical_fiber.quantum_channel

notation `|` x `|` := abs x

variables (n m : ‚Ñï)

---- QUANTUM ENTROPY

/-
Definition (Quantum entropy): 
-/
def quantum_entropy (œÅ : density_operator n) : ‚Ñù := - Tr(œÅ.M * matrix_log(œÅ.M))

notation `H(` œÅ `)` := quantum_entropy(œÅ)

/-
Theorem (non-negativity): Quantum entropy is non-negative.
-/
theorem quantum_entropy_nonnegative : ‚àÄ (œÅ : density_operator n), H(œÅ) ‚â• 0 :=
-- proof
begin
    sorry
end

/-
Theorem (minimum value): The minimum value of quantum entropy is 
zero and occurs when the state is pure.
-/
theorem minimum_value_quantum_entropy : 
‚àÄ (œÅ : density_operator n), is_pure œÅ ‚Üí H(œÅ) = 0 := sorry

/-
Theorem (maximum value): The maximum value of quantum entropy is 
log d and occurs when the state is the maximally mixed state.
-/
theorem maximum_value_quantum_entropy {œÅ : density_operator} : 
H(œÅ) ‚â§ real.log œÅ.dim :=
begin
    sorry
end

/-
Theorem (additivity for tensor states)
-/
theorem additive_quantum_entropy_tensor_states :
‚àÄ (œÅ‚ÇÅ : density_operator n) (œÅ‚ÇÇ : density_operator m), H(œÅ‚ÇÅ ‚äó œÅ‚ÇÇ) = H(œÅ‚ÇÅ) + H(œÅ‚ÇÇ) := 
begin
    sorry
end

/-
Theorem (Araki-Lieb triangle inequality)
-/
theorem Araki_Lieb {œÅ : density_operator} : 
|H(A)_œÅ - H(B)_œÅ| ‚â§ H(AB)_œÅ := 
begin
    sorry
end

/-
Theorem (strong subadditivity)
Page 345 here https://arxiv.org/pdf/1106.1445.pdf.
-/
theorem strong_subadditivity {œÅ : density_operator} :
H(AC)_œÅ + H(BC)_œÅ ‚â• H(ABC)_œÅ + H(C)_œÅ :=
begin
    have : I(A;B|C)_œÅ = H(AC)_œÅ + H(BC)_œÅ - H(ABC)_œÅ - H(C)_œÅ, {sorry},
    have : I(A;B|C)_œÅ = H(B|C)_œÅ - H(B|AC)_œÅ, {sorry},
    have : -H(B|AC)_œÅ = D(œÅ‚à•I‚äóTr_B(œÅ)), {sorry},
    have : H(B|C)_œÅ =  -D(Tr_A(œÅ)‚à•I‚äóTr_AB(œÅ)), {sorry},
    have : D(œÅ‚à•I_B‚äóTr_B(œÅ)) ‚â• D(Tr_A(œÅ)‚à•I_B‚äóTr_AB(œÅ)), {sorry},
    sorry
end

/-
Theorem (unital channels increase entropy)
-/
theorem unital_channels_increase_entropy 
{œÅ : density_operator} {ùí© : quantum_channel} {hùí© : is_unital(ùí©)} : 
H(ùí©(œÅ)) ‚â• H(œÅ) :=
begin
    sorry
end




---- CONDITIONAL QUANTUM ENTROPY

/-
Definition (conditional quantum entropy)
-/
def cond_quantum_entropy (œÅ : density_operator n) : ‚Ñù := H(œÅ) - H(Tr_A(œÅ))

notation `H(` A `|` B `)_` œÅ := cond_quantum_entropy(œÅ)

/-
Theorem (conditioning does not increase entropy)
-/
theorem cond_entropy_leq_entropy (œÅ : density_operator n) : 
H(A)_œÅ ‚â• H(A|B)_œÅ := 
begin
    sorry
end

/-
Theorem (maximum of abs of conditional quantum entropy)
Page 333 here https://arxiv.org/pdf/1106.1445.pdf.
-/
theorem cond_quantum_entropy_max : 
‚àÄ (œÅ : density_operator), |H(A|B)_œÅ| ‚â§ real.log Tr_B(œÅ).dim :=
begin
    -- start by rewriting using abs_le

    -- first we prove that H(A|B)_œÅ ‚â§ real.log Tr_B(œÅ).dim

    -- then we prove that H(A|B)_œÅ ‚â• - real.log Tr_B(œÅ).dim
    sorry
end

/-
Theorem (The œÄ_A ‚äó œÄ_B state saturates condition quantum entropy)
-/
theorem cond_quantum_entropy_saturated {œÅ := œÄ‚äóœÄ} : 
H(A|B)_œÅ = real.log Tr_B(œÅ).dim := 
begin
    sorry
end




---- COHERENT INFORMATION

/-
Definition (coherent information)
-/
def coherent_information (œÅ : density_operator) {hœÅ : œÅ.dim ‚â• 4} : ‚Ñù := 
H(pTr(œÅ.M , œÅ.dim/2)) - H(œÅ)

notation `I(` A `‚ü©` B `)_` œÅ := coherent_information(œÅ)

/-
Definition (reverse coherent information): 
-/
def reverse_coherent_information (œÅ : density_operator) := sorry

/-
Theorem (coherent information of a maximally entangled state)
-/
theorem coherent_info_max_ent_state 
{œÅ : density_operator} {hœÅ : is_maximally_entangled} :
I(A‚ü©B)_œÅ = ... := 
begin
    sorry
end

/-
Theorem (coherent information of purification)
"Thus, there is a sense in which the coherent information 
measures the difference in the uncertainty of Bob and the 
uncertainty of the environment."
https://arxiv.org/pdf/1106.1445.pdf
-/
theorem coh_info_purification : 
‚àÄ (œÅ : density_operator), 
    ‚àÉ {‚à£œà‚ü© : pure_state} {hœà : is_purification œÅ ‚à£œà‚ü©}, 
        I(A‚ü©B)_œÅ = H(B)_‚à£œà‚ü© - H(E)_‚à£œà‚ü© :=
begin
    sorry
end




---- QUANTUM MUTUAL INFORMATION

/-
Definition (quantum mutual information)
-/
def mut_info (œÅ : density_operator) : ‚Ñù := 
H(A)_œÅ + H(B)_œÅ - H(AB)_œÅ

notation `I(` A `;` B `)_` œÅ := mut_info(œÅ)

/-
Lemma (rewrite in terms of cond entropy)
-/
lemma mut_info_cond_ent {œÅ : density_operator} :
I(A;B)_œÅ = H(A)_œÅ - H(A|B)_œÅ :=
begin
    sorry
end

/-
Lemma (another rewrite in terms of cond entropy)
-/
lemma mut_info_cond_ent' {œÅ : density_operator} : 
I(A;B)_œÅ = H(B)_œÅ - H(B|A)_œÅ :=
begin
    sorry
end

/-
Lemma (non-negativity)
-/
lemma mut_info_nonnegative {œÅ : density_operator} : 
I(A;B)_œÅ ‚â• 0 :=
begin
    sorry
end




---- HOLEVO INFORMATION

/-
Definition (Holevo information)
-/
def Holevo_information (œÅ : density_operator) := sorry




---- ACCESSIBLE INFORMATION

/-
Definition (accessible information)
-/
def accessible_info := sorry




---- CONDITIONAL QUANTUM MUTUAL INFORMATION

/-
Definition (conditional quantum mutual information)
-/
def cond_mut_info (œÅ : density_operator) : ‚Ñù := 
H(A|C)_œÅ + H(B|C)_œÅ - H(AB|C)_œÅ

notation `I(` A `;` B `|` C `)_` œÅ := cond_mut_info œÅ

/-
Lemma (quanutm mutual information chain rule)
-/
lemma mut_info_chain_rule {œÅ : density_operator} :
I(A;BC)_œÅ = I(A;B)_œÅ + I(A;C|B)_œÅ :=
begin
    sorry
end

/-
Lemma (non-negativity / a.k.a. strong subadditivity)
-/
lemma cond_mut_info_nonnegative {œÅ : density_operator} : 
I(A;B|C)_œÅ ‚â• 0 :=
begin
    sorry
end

/-
Lemma ("duality" of condition mutual information)
-/
lemma duality {œÅ : density_operator} {hœÅ : is_pure œÅ} : 
I(A;B|C)_œÅ = I(A;B|D)_œÅ :=
begin
    sorry
end




---- QUANTUM RELATIVE ENTROPY

/-
Definition (quantum relative entropy)
-/
def quantum_relative_entropy (œÅ : density_operator) (œÉ : positive_semidefinite_operator) := sorry

notation `D(` œÅ `‚à•` œÉ `)` := quantum_relative_entropy(œÅ,œÉ)

/-
Theorem (quantum Pinsker inequality)
-/
theorem quantum_pinsker {œÅ : density_operator} {œÉ : linear_operator} : 
D(œÅ‚à•œÉ) ‚â• 1/(2 * ln 2) * ‚à•œÅ - œÉ‚à•‚ÇÅ^2 := 
begin
    sorry
end




---- SQUASHED ENTANGLEMENT

/-
Definition (squashed entanglement of quantum state for a given partition)
-/
def squashed_entanglement (œÅ : density_operator) 
{hœÅ : œÅ.dim > 4} (partition_point : ‚Ñï) : ‚Ñù := sorry